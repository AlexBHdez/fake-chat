{"version":3,"sources":["components/Chat/chat.module.scss","components/Header/header.js","components/Chat/chat.js","components/Intro/intro.js","index.js","components/Intro/intro.module.scss","components/Header/header.module.scss"],"names":["module","exports","chat","chat__window","chat__window_message","chat__window_message_info","chat__window_message_text","chat__window_received","chat__write","chat__write_input","chat__write_button","Header","react_default","a","createElement","className","style","header","href","header__brand","header__copy","target","rel","classes","classNames","bind","Chat","handleSubmit","e","preventDefault","_this$props","_this","props","newMessage","from","userFrom","id","chatId","date","Date","text","value","submit","scrollToBottom","chatWindow","document","querySelectorAll","setTimeout","forEach","elem","scrollTop","scrollTopMax","isMe","messageId","showDate","concat","getHours","getMinutes","showMessages","messages","map","message","i","key","Object","defineProperty","name","_this2","this","onChange","onSubmit","type","placeholder","ref","input","Component","Intro","userOne","userTwo","users","intro","intro__title","intro__input","intro__button","App","state","showChats","user","send","newUsers","setState","toConsumableArray","react","length","ReactDOM","render","src_App","querySelector"],"mappings":"2EACAA,EAAAC,QAAA,CAAkBC,KAAA,mBAAAC,aAAA,2BAAAC,qBAAA,mCAAAC,0BAAA,wCAAAC,0BAAA,wCAAAC,sBAAA,oCAAAC,YAAA,0BAAAC,kBAAA,gCAAAC,mBAAA,2OCWHC,EAPA,kBACbC,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAMC,QACvBL,EAAAC,EAAAC,cAAA,KAAGI,KAAK,IAAIH,UAAWC,IAAMG,eAA7B,YACAP,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAMI,cAAvB,iCAAmER,EAAAC,EAAAC,cAAA,KAAGI,KAAK,gCAAgCG,OAAO,SAASC,IAAI,uBAA5D,iDCHjEC,SAAUC,EAAWC,KAAKT,KA6FjBU,6MAxFbC,aAAe,SAACC,GACdA,EAAEC,iBADkB,IAAAC,EAGSC,EAAKC,MAG5BC,EAAa,CACjBC,KAPkBJ,EAGZK,SAKNC,GARkBN,EAGFO,OAMhBC,KAAM,IAAIC,KACVC,KAAMT,EAAKS,KAAKC,OAIlBV,EAAKC,MAAMU,OAAOT,GAClBF,EAAKS,KAAKC,MAAQ,MAIpBE,eAAiB,WACf,IAAMC,EAAaC,SAASC,iBAAiB,eAEzCF,GACFG,WAAW,WACTH,EAAWI,QAAQ,SAAAC,GACjBA,EAAKC,UAAYD,EAAKE,gBAEvB,OAKPC,KAAO,SAACC,GAEN,OADmBtB,EAAKC,MAAhBK,SACUgB,KAIpBC,SAAW,SAAChB,GACV,UAAAiB,OAAWjB,EAAKkB,WAAhB,KAAAD,OAA8BjB,EAAKmB,iBAIrCC,aAAe,SAACC,GACd,OAAOA,EAASC,IAAI,SAACC,EAASC,GAAV,OAClBlD,EAAAC,EAAAC,cAAA,OACEiD,IAAKD,EACL/C,UAAWQ,EACTP,IAAMZ,qBADU4D,OAAAC,EAAA,EAAAD,CAAA,GAEdhD,IAAMT,sBAAwBwB,EAAKqB,KAAKS,EAAQzB,OAGpDxB,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAMX,2BACnB0B,EAAKqB,KAAKS,EAAQzB,IAAMyB,EAAQ3B,KAAKgC,KAAO,MAC5CnC,EAAKuB,SAASO,EAAQvB,OAE1B1B,EAAAC,EAAAC,cAAA,KAAGC,UAAWC,IAAMV,2BAA6BuD,EAAQrB,kFAKtD,IAAA2B,EAAAC,KACCT,EAAaS,KAAKpC,MAAlB2B,SAER,OACE/C,EAAAC,EAAAC,cAAA,WAASC,UAAWC,IAAMd,MACxBU,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMb,aAAciC,GAAG,aAAaiC,SAAUD,KAAKzB,kBAC/DyB,KAAKV,aAAaC,IAEtB/C,EAAAC,EAAAC,cAAA,QACAwD,SAAUF,KAAKzC,aACfZ,UAAWC,IAAMR,aACfI,EAAAC,EAAAC,cAAA,SACEyD,KAAK,OACLC,YAAY,iBACZzD,UAAWC,IAAMP,kBACjBgE,IAAK,SAAAC,GAAK,OAAIP,EAAK3B,KAAOkC,KAE5B9D,EAAAC,EAAAC,cAAA,UACEyD,KAAK,SACLxD,UAAWC,IAAMN,8BAnFViE,6BCuCJC,6MAtCbjD,aAAe,SAACC,GAGd,GAFAA,EAAEC,iBAEyB,KAAvBE,EAAK8C,QAAQpC,OAAuC,KAAvBV,EAAK+C,QAAQrC,MAAc,CAC1D,IAAMsC,EAAQ,CACZ,CAAEb,KAAMnC,EAAK8C,QAAQpC,OACrB,CAAEyB,KAAMnC,EAAK+C,QAAQrC,QAEvBV,EAAKC,MAAMU,OAAOqC,6EAKb,IAAAZ,EAAAC,KACP,OACExD,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAMgE,MAAOV,SAAUF,KAAKzC,cAC3Cf,EAAAC,EAAAC,cAAA,KAAGC,UAAWC,IAAMiE,cAApB,kDACArE,EAAAC,EAAAC,cAAA,SACEyD,KAAK,OACLxD,UAAWC,IAAMkE,aACjBV,YAAY,WACZC,IAAK,SAAAC,GAAK,OAAIP,EAAKU,QAAUH,KAE/B9D,EAAAC,EAAAC,cAAA,SACEyD,KAAK,OACLxD,UAAWC,IAAMkE,aACjBV,YAAY,WACZC,IAAK,SAAAC,GAAK,OAAIP,EAAKW,QAAUJ,KAE/B9D,EAAAC,EAAAC,cAAA,UACEyD,KAAK,SACLxD,UAAWC,IAAMmE,eAFnB,sBAhCYR,aCMdS,6MAEJC,MAAQ,CACNN,MAAO,GACPpB,SAAU,MAIZ2B,UAAY,WAGV,OAFkBvD,EAAKsD,MAAfN,MAEKnB,IAAI,SAAC2B,EAAMzB,GAAP,OACflD,EAAAC,EAAAC,cAACZ,EAAD,CACE6D,IAAKD,EACL3B,SAAUoD,EACVlD,OAAQyB,EACRH,SAAU5B,EAAKsD,MAAM1B,SACrBjB,OAAQX,EAAKyD,YAMnBT,MAAQ,SAACU,GACP1D,EAAK2D,SAAS,CACZX,MAAOU,OAKXD,KAAO,SAACvD,GACkB,KAApBA,EAAWO,MACbT,EAAK2D,SAAS,CACZ/B,SAAQ,GAAAJ,OAAAS,OAAA2B,EAAA,EAAA3B,CAAMjC,EAAKsD,MAAM1B,UAAjB,CAA2B1B,+EAKhC,IACC8C,EAAUX,KAAKiB,MAAfN,MAER,OACEnE,EAAAC,EAAAC,cAAC8E,EAAA,SAAD,KACEhF,EAAAC,EAAAC,cAACG,EAAD,MACAL,EAAAC,EAAAC,cAAA,YAEIiE,EAAMc,OAAS,EAAIzB,KAAKkB,YAAc1E,EAAAC,EAAAC,cAACkE,EAAD,CAAOtC,OAAQ0B,KAAKW,iBA9CpDJ,aAsDlBmB,IAASC,OAAOnF,EAAAC,EAAAC,cAACkF,EAAD,MAAQnD,SAASoD,cAAc,6BChE/CjG,EAAAC,QAAA,CAAkBgF,aAAA,4BAAAC,aAAA,4BAAAC,cAAA,iDCAlBnF,EAAAC,QAAA,CAAkBgB,OAAA,uBAAAE,cAAA,8BAAAC,aAAA","file":"static/js/main.d8371ce1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"chat_chat__3ipiM\",\"chat__window\":\"chat_chat__window__7XEvZ\",\"chat__window_message\":\"chat_chat__window_message__3CVK3\",\"chat__window_message_info\":\"chat_chat__window_message_info__2_Q1i\",\"chat__window_message_text\":\"chat_chat__window_message_text__1-UZE\",\"chat__window_received\":\"chat_chat__window_received__3At0b\",\"chat__write\":\"chat_chat__write__324ve\",\"chat__write_input\":\"chat_chat__write_input__A8laM\",\"chat__write_button\":\"chat_chat__write_button__3vLKh\"};","import React from 'react';\n\n// Styles\nimport style from './header.module.scss';\n\nconst Header = () => (\n  <header className={style.header}>\n    <a href=\"/\" className={style.header__brand} >fakeChat</a>\n    <span className={style.header__copy}>Made with love (and react) by <a href=\"https://github.com/AlexBHdez/\" target=\"_blank\" rel=\"noopener noreferrer\">@AlexBHdez</a></span>\n  </header>\n);\n\nexport default Header;","import React, { Component } from 'react';\n\n// Styles\nimport style from './chat.module.scss';\nimport classNames from 'classnames/bind';\nconst classes = classNames.bind(style);\n\nclass Chat extends Component {\n  \n  // Manage the submit on click button after type the message\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    const { userFrom, chatId } = this.props;\n\n    // Store the data from props and from the input ref.\n    const newMessage = {\n      from: userFrom,\n      id: chatId, \n      date: new Date(),\n      text: this.text.value,\n    };\n\n    // Pass the data to the father and put the input value empty.\n    this.props.submit(newMessage);\n    this.text.value = '';\n  };\n  \n  // Just to scroll to bottom when overflows the chat window.\n  scrollToBottom = () => {\n    const chatWindow = document.querySelectorAll('#chatWindow');\n    \n    if (chatWindow) {\n      setTimeout(() => {\n        chatWindow.forEach(elem => {\n          elem.scrollTop = elem.scrollTopMax;\n        })\n      }, 10)\n    }\n  };\n\n  // To know if it is my message or not and return a boolean.\n  isMe = (messageId) => {\n    const { chatId } = this.props;\n    return chatId !== messageId ? true : false;\n  }\n\n  // To render a formatted date.\n  showDate = (date) => {\n    return ` ${date.getHours()}:${date.getMinutes()}`;\n  };\n\n  // To show the messages through the received props\n  showMessages = (messages) => {\n    return messages.map((message, i) => \n      <div \n        key={i}\n        className={classes(\n          style.chat__window_message,\n          {[style.chat__window_received]: this.isMe(message.id)}\n        )}\n      >\n        <span className={style.chat__window_message_info}>\n          { this.isMe(message.id) ? message.from.name : 'You' }\n          { this.showDate(message.date) }\n        </span>\n        <p className={style.chat__window_message_text}>{ message.text }</p>\n      </div>\n    );\n  };\n\n  render() {\n    const { messages } = this.props;\n    \n    return(\n      <section className={style.chat}>\n        <div className={style.chat__window} id=\"chatWindow\" onChange={this.scrollToBottom()} >\n          { this.showMessages(messages) }\n        </div>\n        <form\n        onSubmit={this.handleSubmit} \n        className={style.chat__write} >\n          <input \n            type=\"text\"\n            placeholder=\"Type a message\"\n            className={style.chat__write_input}\n            ref={input => this.text = input}\n          />\n          <button \n            type=\"submit\" \n            className={style.chat__write_button}\n          ></button>\n        </form>\n      </section>\n    )\n  }\n}\n\nexport default Chat;","import React, { Component } from 'react';\n\n// Styles\nimport style from './intro.module.scss';\n\nclass Intro extends Component {\n\n  // Manage the input values and send them to the father.\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (this.userOne.value !== '' && this.userTwo.value !== '') {\n      const users = [\n        { name: this.userOne.value },\n        { name: this.userTwo.value }\n      ];\n      this.props.submit(users);\n    };\n  };\n\n\n  render() {\n    return(\n      <form className={style.intro} onSubmit={this.handleSubmit}>\n        <p className={style.intro__title}>Pick the username for each member of the chat.</p>\n        <input \n          type=\"text\" \n          className={style.intro__input}\n          placeholder=\"user one\" \n          ref={input => this.userOne = input} \n        />\n        <input \n          type=\"text\" \n          className={style.intro__input}\n          placeholder=\"user two\" \n          ref={input => this.userTwo = input}\n        />\n        <button \n          type=\"submit\" \n          className={style.intro__button}\n        >let's chat</button>\n      </form>\n    )\n  }\n};\n\nexport default Intro;","import React, { Fragment, Component } from 'react';\nimport ReactDOM from 'react-dom';\n\n// Styles\nimport './index.scss';\n\n// Components\nimport Header from './components/Header/header';\nimport Chat from './components/Chat/chat';\nimport Intro from './components/Intro/intro';\n\nclass App extends Component {\n\n  state = {\n    users: [],\n    messages: [],\n  }\n\n  // Render the chats and passing the needed props.\n  showChats = () => {\n    const { users } = this.state;\n\n    return users.map((user, i) => \n      <Chat \n        key={i}\n        userFrom={user}\n        chatId={i}\n        messages={this.state.messages} \n        submit={this.send}  \n      />\n    )\n  };\n\n  // Call from intro component on submit.\n  users = (newUsers) => {\n    this.setState({\n      users: newUsers,\n    });\n  };\n\n  // Call from chat component on submit message.\n  send = (newMessage) => {\n    if (newMessage.text !== '') {\n      this.setState({\n        messages: [...this.state.messages, newMessage],\n      });\n    }\n  };\n\n  render() {\n    const { users } = this.state;\n\n    return(\n      <Fragment>\n        <Header />\n        <main>\n          {/* Render the intro until we have two usernamos */}\n          { users.length > 1 ? this.showChats() : <Intro submit={this.users} /> }\n        </main>\n      </Fragment>\n    );\n\n  }\n};\n\nReactDOM.render(<App/>, document.querySelector('#root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"intro__title\":\"intro_intro__title__3Ky0L\",\"intro__input\":\"intro_intro__input__XbwRs\",\"intro__button\":\"intro_intro__button__12ESv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__biqVs\",\"header__brand\":\"header_header__brand__3hgnH\",\"header__copy\":\"header_header__copy__J3zC7\"};"],"sourceRoot":""}